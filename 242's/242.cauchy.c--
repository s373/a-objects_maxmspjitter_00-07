//////////////		242.cauchy   \ probal cause for alteration////#include "Movies.h"#include "ext_common.h"#include "ext.h"#include "ext_user.h"#include <math.h>#include <stdlib.h>#include "n2.basicstrings.c"#include "n2.0000.h"     // nato.inkludestypedef struct zttz {	Object   n_ob;     // required max 	void     *n2hdr;   // required nato - position = signifikant _ must b 2nd		void             *dataout;      // n2data outlet	 	n2imgptr         gvelt;         // img buffer    short            red, green, blue, rgb;       // var!ablz    Boolean          on,bypass,freeze,think,quarrel;  // nato.objstate flagz} NNato;void *nnato_new(short variant);void nnato_assist(NNato *x, void *b, long msg, long nr, char *s);void nnato_info(NNato *x, void *p, void *b);void nnato_free(NNato *x);void nnato_processimage(NNato *x, n2atom *data);void nnato_processimage2(NNato *x, n2atom *data);void nnato_processimage3(NNato *x, n2atom *data);void nnato_processimage4(NNato *x, n2atom *data);void nnato_processimage5(NNato *x, n2atom *data);void nnato_processimage6(NNato *x, n2atom *data);void nnato_processimage7(NNato *x, n2atom *data);void nnato_processimage8(NNato *x, n2atom *data);void nnato_processimage9(NNato *x, n2atom *data);void nnato_processimage10(NNato *x, n2atom *data);void nnato_processimage11(NNato *x, n2atom *data);void nnato_processimage12(NNato *x, n2atom *data);void nnato_on(NNato *x, long flag);void nnato_bypass(NNato *x, long flag);void nnato_freeze(NNato *x, long flag);void nnato_int(NNato *x, long n);void nnato_bang(NNato *x);void nnato_think(NNato *x, short val);void nnato_quarrel(NNato *x, short val);void nnato_variant(NNato *x, short variant);void nnato_weight(NNato *x, short weight);void nnato_red(NNato *x, short red);void nnato_green(NNato *x, short green);void nnato_blue(NNato *x, short blue);void nnato_rgb(NNato *x, short rgb);void     *nnato_class;main(void){	setup(&nnato_class, nnato_new, (method)nnato_free, (short)sizeof(NNato), 0L, 	      A_DEFLONG, 0);    n2objaddimagecmd();    n2addstatecmd((method)nnato_int,(method)nnato_bang,                  (method)nnato_on,(method)nnato_freeze,(method)nnato_bypass,                  (method)nnato_think,(method)nnato_quarrel,(method)nnato_variant,0); 	addmess((method)nnato_assist,	                   "assist",    	A_CANT,0); 	addmess((method)nnato_info,	                       "info",		    A_CANT,0);    addmess((method)nnato_weight,                        "weight",           A_DEFLONG,0);    addmess((method)nnato_red,                        "red",           A_DEFLONG,0);    addmess((method)nnato_green,                        "green",           A_DEFLONG,0);    addmess((method)nnato_blue,                        "blue",           A_DEFLONG,0);    addmess((method)nnato_rgb,                        "rgb",           A_DEFLONG,0);    n2reklama();    n2addfklass("242.cauchy");	post("242.cauchy             \\ \\ \\\\  sier.2001");  }void nnato_assist(NNato *x, void *b, long msg, long nr, char *s){	if (msg == 1)      // inlet	   strcpy( s, "(Nato) Input Image");    else       {	   if (msg == 2)   // outlet	      if (nr == 0)	         strcpy( s, "(Nato) Output Image");       }}void nnato_info(NNato *x, void *p, void *b){      n2info();}void *nnato_new(short variant){	NNato      *x;    short      err;  		x = (NNato *)newobject(nnato_class);    n2addoutlet(x,&x->dataout);        if (err = n2objinit(x))       { post("242.cauchy  :  n2objinit err = %ld",err); return;}            if ((err = n2inewimage(&x->gvelt,n2idefwidth,n2idefheight)))       { post(" 242.cauchy  :  n2inewimage err = %ld",err); goto ikk;}      n2objsetimagefun(x,(method)nnato_processimage);	x->red = x->green = x->blue = 0;	   if (!variant)       n2objsetimagefun(x,(method)nnato_processimage);    else if (variant == 1)       n2objsetimagefun(x,(method)nnato_processimage2);   else if (variant == 2)       n2objsetimagefun(x,(method)nnato_processimage3);   else if (variant == 3)       n2objsetimagefun(x,(method)nnato_processimage4);   else if (variant == 4)       n2objsetimagefun(x,(method)nnato_processimage5);   else if (variant == 5)       n2objsetimagefun(x,(method)nnato_processimage6);   else if (variant == 6)       n2objsetimagefun(x,(method)nnato_processimage7);   else if (variant == 7)       n2objsetimagefun(x,(method)nnato_processimage8);   else if (variant == 8)       n2objsetimagefun(x,(method)nnato_processimage9);   else if (variant == 9)       n2objsetimagefun(x,(method)nnato_processimage10);   else if (variant == 10)       n2objsetimagefun(x,(method)nnato_processimage11);   else if (variant == 11)       n2objsetimagefun(x,(method)nnato_processimage12);   	x->on = true;    x->bypass = x->freeze = x->think = x->quarrel = false;         return (x);ikk:	nnato_free(x);}void nnato_free(NNato *x){    if (x->gvelt) { n2idisposeimage(x->gvelt); x->gvelt = 0;}    n2objfree(x);}void nnato_on(NNato *x, long flag){        x->on = flag;}    void nnato_bypass(NNato *x, long flag){        x->bypass = flag;}      void nnato_freeze(NNato *x, long flag){        x->freeze = flag;} void nnato_int(NNato *x, long n){   n2defintstatefun(x,n);}void nnato_bang(NNato *x){   n2registerimage(x,n2objtype,x->dataout,0,x->gvelt);}void nnato_think(NNato *x, short val){   x->think = val;}void nnato_quarrel(NNato *x, short val){   x->quarrel = val;}void nnato_variant(NNato *x, short variant){   if (!variant)       n2objsetimagefun(x,(method)nnato_processimage);    else if (variant == 1)       n2objsetimagefun(x,(method)nnato_processimage2);   else if (variant == 2)       n2objsetimagefun(x,(method)nnato_processimage3);   else if (variant == 3)       n2objsetimagefun(x,(method)nnato_processimage4);   else if (variant == 4)       n2objsetimagefun(x,(method)nnato_processimage5);   else if (variant == 5)       n2objsetimagefun(x,(method)nnato_processimage6);   else if (variant == 6)       n2objsetimagefun(x,(method)nnato_processimage7);   else if (variant == 7)       n2objsetimagefun(x,(method)nnato_processimage8);   else if (variant == 8)       n2objsetimagefun(x,(method)nnato_processimage9);   else if (variant == 9)       n2objsetimagefun(x,(method)nnato_processimage10);   else if (variant == 10)       n2objsetimagefun(x,(method)nnato_processimage11);   else if (variant == 11)       n2objsetimagefun(x,(method)nnato_processimage12);}void nnato_weight(NNato *x, short weight){   x->green = x->blue = x->red = weight;}void nnato_red(NNato *x, short red){   x->red = red;}void nnato_green(NNato *x, short green){   x->green = green;}void nnato_blue(NNato *x, short blue){   x->blue = blue;}void nnato_rgb(NNato *x, short rgb){   x->red = x->green = x->blue = rgb;} static long rand() { static long seed = 0;  seed = (seed * 31415821 + 1) & 268435455;    /* 2^28 - 1. */ return seed; }  // perform routines do different pixel averagings in the main loopvoid nnato_processimage(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err, r1, g1, b1, z;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cauchy  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {            	z = rand();                pix = n2get32(src);                r1 = red * tan ((z - .5) * n2mathpi);				//   cauchy.  A * tan((rnd-.5)*pi)                g1 = green * tan ((z - .5) * n2mathpi);                b1 = blue * tan ((z - .5) * n2mathpi);                                redpix = n2get32red(pix) + r1;                greenpix = n2get32green(pix) + g1;                bluepix = n2get32blue(pix) + b1;				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255(redpix/(greenpix+bluepix)),				         n2klamp255(greenpix/(redpix+bluepix)),				         n2klamp255(bluepix/(redpix+greenpix)));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage2(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix) + red;                greenpix = n2get32green(pix) + green;                bluepix = n2get32blue(pix) + blue;				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255((greenpix+bluepix)/redpix),				         n2klamp255((redpix+bluepix)/greenpix),				         n2klamp255((redpix+greenpix)/bluepix));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage3(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255(red + ((greenpix+bluepix)/redpix)),				         n2klamp255(green + ((redpix+bluepix)/greenpix)),				         n2klamp255(blue + ((redpix+greenpix)/bluepix)));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage4(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255(((greenpix*green)+(bluepix*blue))/redpix),				         n2klamp255(((redpix*red)+(bluepix*blue))/greenpix),				         n2klamp255(((redpix*red)+(greenpix*green))/bluepix));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage5(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255(((greenpix*green)+(bluepix*blue))/(redpix*red)),				         n2klamp255(((redpix*red)+(bluepix*blue))/(greenpix*green)),				         n2klamp255(((redpix*red)+(greenpix*green))/(bluepix*blue)));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage6(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255(((redpix*red)/(greenpix*green)+(bluepix*blue))),				         n2klamp255(((greenpix*green)/(redpix*red)+(bluepix*blue))),				         n2klamp255(((bluepix*blue)/(redpix*red)+(greenpix*green))));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage7(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix) + red;                greenpix = n2get32green(pix) + green;                bluepix = n2get32blue(pix) + blue;				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255((redpix/(greenpix+bluepix))*red),				         n2klamp255((greenpix/(redpix+bluepix))*green),				         n2klamp255((bluepix/(redpix+greenpix))*blue));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage8(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix) + red;                greenpix = n2get32green(pix) + green;                bluepix = n2get32blue(pix) + blue;				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255(((greenpix+bluepix)/redpix)*red),				         n2klamp255(((redpix+bluepix)/greenpix)*green),				         n2klamp255(((redpix+greenpix)/bluepix)*blue));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage9(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255((red + ((greenpix+bluepix)/redpix))*red),				         n2klamp255((green + ((redpix+bluepix)/greenpix))*green),				         n2klamp255((blue + ((redpix+greenpix)/bluepix))*blue));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage10(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255((((greenpix*green)+(bluepix*blue))/redpix)*red),				         n2klamp255((((redpix*red)+(bluepix*blue))/greenpix)*green),				         n2klamp255((((redpix*red)+(greenpix*green))/bluepix)*blue));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage11(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255((((greenpix*green)+(bluepix*blue))/(redpix*red))*red),				         n2klamp255((((redpix*red)+(bluepix*blue))/(greenpix*green))*green),				         n2klamp255((((redpix*red)+(greenpix*green))/(bluepix*blue))*blue));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		void nnato_processimage12(NNato *x, n2atom *data){                       long           i, j, roubitez, pix, redpix, greenpix, bluepix;                              short          red   = x->red, green = x->green, blue= x->blue,                   width, height, err;                        Ptr            src, dst, srcadresz, dstadresz;          n2pixmaphdl    srcpixmap, dstpixmap;    n2pixstate     srcpixztate, dstpixztate;    n2imgptr       dstgvelt, gveltptr = n2getatomimage(data);        if (!x->on || !gveltptr) return;        if (x->freeze)           {                 n2registerimage(x,n2objtype,x->dataout,data,x->gvelt);              return;           }                       if (x->bypass)           {              n2registerimage(x,n2objtype,x->dataout,data,gveltptr);              return;              }         if ((err = n2iensuredimeq(&gveltptr,&x->gvelt)))           {             post ("242.cga  : n2iensureimagedimeq err = %ld", err);             return;           }           if (!x->think)                      srcpixmap   = n2igetpixmap(gveltptr);        else            srcpixmap   = n2igetpixmap(x->gvelt);               if (!x->quarrel)             dstgvelt = x->gvelt;        else            dstgvelt = gveltptr;                         dstpixmap   = n2igetpixmap(dstgvelt);         srcpixztate = n2igetpixstate(srcpixmap);                dstpixztate = n2igetpixstate(dstpixmap);                if (!n2ilockpix(srcpixmap)) return;               if (!n2ilockpix(dstpixmap)) goto ikk;                      srcadresz = n2igetpixaddr(srcpixmap);        dstadresz = n2igetpixaddr(dstpixmap);		roubitez  = n2igetpixrowbytes(srcpixmap);         n2igetdim(gveltptr,&width,&height);                    for(i = 0; i < height; i++)          {            src = srcadresz + i * roubitez;                        dst = dstadresz + i * roubitez;                                  for(j = 0; j < width; j++)            {                pix = n2get32(src);                redpix = n2get32red(pix);                greenpix = n2get32green(pix);                bluepix = n2get32blue(pix);				n2set32m(dst,				         n2get32alpha(pix),				         n2klamp255(((redpix*red)/(greenpix*green)+(bluepix*blue))*red),				         n2klamp255(((greenpix*green)/(redpix*red)+(bluepix*blue))*green),				         n2klamp255(((bluepix*blue)/(redpix*red)+(greenpix*green))*blue));				src+=4;				dst+=4;					             }		 }  	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);        n2registerimage(x,n2objtype,x->dataout,data,dstgvelt);        return;        ikk: 	    n2isetpixstate(srcpixmap,srcpixztate);        n2isetpixstate(dstpixmap,dstpixztate);}		